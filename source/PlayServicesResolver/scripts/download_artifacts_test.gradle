/*
 * Copyright 2018 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.security.MessageDigest
import java.io.BufferedInputStream
import java.io.FileInputStream
import java.util.zip.ZipEntry
import java.util.zip.ZipInputStream

// Logger which captures standard output or error streams to a buffer.
class StandardOutputErrorLogger implements StandardOutputListener {
  // List of lines captured by this logger.
  private List<String> outputList = []

  /*
   * Implements StandardOutputListener to capture a log message in
   * outputList.
   *
   * @param output Data to capture.
   */
  void onOutput(CharSequence output) {
    outputList.add(output)
  }

  /*
   * Retrieve a string containing the lines aggregated by this logger.
   *
   * @returns All data aggregated by this logger.
   */
  String getOutput() {
    return outputList.join("")
  }

  /*
   * Install the logger on the standard output and error streams of a task and
   * clear the internal buffer.
   *
   * @param taskToLog Task to install this logger on.
   */
  void install(Task taskToLog) {
    outputList = []
    taskToLog.logging.addStandardOutputListener(this)
    taskToLog.logging.addStandardErrorListener(this)
  }

  /*
   * Remove the logger from the standard output and error streams of a task and
   * clear the internal buffer.
   *
   * @param taskToLog Task to remove this logger from.
   */
  void uninstall(Task taskToLog) {
    taskToLog.logging.removeStandardOutputListener(this)
    taskToLog.logging.removeStandardErrorListener(this)
  }
}

project.ext {
  // Directory which contains this script.
  def scriptDirectory = buildscript.sourceFile.getParentFile()

  // Directory used to execute gradle subprocesses.
  outputDir = new File(System.getProperty("user.dir"),
                       "download_artifacts_test_output")

  // Gradle file under test.
  srcBuildFile = new File(scriptDirectory, "download_artifacts.gradle")
  buildFile = new File(outputDir, srcBuildFile.name)

  // Local test maven repo.
  mavenRepo = new File(scriptDirectory,
                       "download_artifacts_test_assets/m2repository")

  // Fake Android SDK home directory.
  androidHome = new File(scriptDirectory, ".") // TODO(smiles): Use a real maven repo here.

  // All test case tasks (createTestTask() appends to this list)
  testTaskNames = []

  // Header in the download script's output that describes the set of artifacts
  // that have been copied.
  copiedArtifactsHeader = "Copied artifacts:"
  // Header in the download script's output that describes the set of artifacts
  // that are missing.
  missingArtifactsHeader = "Missing artifacts:"
  // Header in the download script's output that describes the set of artifacts
  // that were modified from what the user requested.
  modifiedArtifactsHeader = "Modified artifacts:"
}

/*
 * Generate a task to create the specified directory File.
 *
 * @param directoryFile Directory to create.
 *
 * @returns Task to create the specified directory.
 */
Task createDirectoryTask(File directoryFile) {
  Task createDirectory = tasks.create(
    name: "create_" + directoryFile.path.replaceAll(/[\/\\:]/, "-"),
    description: "Creates the directory " + directoryFile.path)
  createDirectory.with {
    outputs.dir directoryFile
    doLast { directoryFile.mkdirs() }
  }
  return createDirectory
}

task copyTestScript(
    type: Copy,
    dependsOn: createDirectoryTask(project.ext.outputDir)) {
  description "Copy the test script into the test project"
  from srcBuildFile
  into outputDir
}

// Create GradleBuild task StartParameter to execute download_artifacts.build.
StartParameter createStartParameters(String packagesToCopy, File targetDir,
                                     boolean useJetifier) {
  def startParameters = new StartParameter()
  startParameters.projectProperties = [
    "ANDROID_HOME": project.ext.androidHome,
    "PACKAGES_TO_COPY": packagesToCopy,
    "TARGET_DIR": targetDir.absolutePath,
    "MAVEN_REPOS": mavenRepo.toURI().toString(),
    // Only search the test repo for artifacts to make the tests deterministic.
    // This disables searching the local Gradle configured repo and remote
    // repos.
    "USE_MAVEN_LOCAL_REPO": "0",
    "USE_REMOTE_MAVEN_REPOS": "0",
    "USE_JETIFIER": useJetifier ? "1" : "0",
    "DATA_BINDING_VERSION": useJetifier ? "3.4.0" : "",
  ]
  startParameters.logLevel = logging.level
  return startParameters
}

/*
 * Calculate the MD5 checksum of the specified file.
 *
 * @param fileToRead File to calculate checksum from.
 *
 * @returns Checksum as a string.
 */
String md5ChecksumFile(File fileToRead) {
  MessageDigest digest = MessageDigest.getInstance("MD5")
  def contents = fileToRead.bytes
  digest.update(contents, 0, contents.length)
  byte[] md5sum = digest.digest()
  BigInteger bigInt = new BigInteger(1, md5sum)
  return bigInt.toString(16).padLeft(32, '0')
}

/*
 * Determine whether a filename is a zip file.
 *
 * @param fileObj File object to query.
 *
 * @returns true if the file is a zip file, false otherwise.
 */
boolean isZipFile(File fileObj) {
  String filename = fileObj.name
  return filename.endsWith(".zip") ||
         filename.endsWith(".jar") ||
         filename.endsWith(".aar") ||
         filename.endsWith(".srcaar")
}

/*
 * Reads all zip file entry metadata into a map.
 *
 * @param fileToRead File to read zip file entries from.
 *
 * @returns Map of entry filename to "size:crc32" strings.
 */
Map<String, String> readZipEntries(File fileToRead) {
  ZipInputStream inputStream = new ZipInputStream(
    new BufferedInputStream(new FileInputStream(fileToRead)))
  Map<String, String> entries = [:]
  while (true) {
    ZipEntry entry = inputStream.nextEntry
    if (entry == null) break
    entries[entry.name] = sprintf("%ld:%ld", entry.size, entry.crc)
  }
  return entries
}


/*
 * Validate the content of two zip files match.
 *
 * @param inputFile File with expected contents.
 * @param outputFile File to compare with inputFile.
 *
 * @returns List of error messages if the content of the files do not match.
 */
List<String> validateZipFilesMatch(File inputFile, File outputFile) {
  Map<String, String> inputEntries = readZipEntries(inputFile)
  Map<String, String> outputEntries = readZipEntries(outputFile)
  List<String> errors = []
  outputEntries.each { String entryName, String outputMetadata ->
    String inputMetadata = inputEntries[entryName]
    if (!inputMetadata) {
      errors.add(sprintf("%s %s (%s) does not exist in %s",
                         outputFile.path, entryName, outputMetadata,
                         inputFile.path))
    } else if (inputMetadata != outputMetadata) {
      errors.add(sprintf("%s %s (%s) != %s %s (%s)",
                         inputFile.path, entryName, inputMetadata,
                         outputFile.path, entryName, outputMetadata))
    }
  }
  return errors
}

/* Compare files yield by a task match the expected input files.
 *
 * Validate each target files for each source file yielded by the specified task
 * are the same.  If outputInputFileMap yields null for an output file, the
 * file contents is not validated.
 *
 * @param taskToValidate Task to retrieve the set of output files from.
 * @param outputInputFileMap Map of output to input files for the task.
 *
 * @throws TaskExecutionException if the files don't match.
 */
void validateFilesMatch(Task taskToValidate,
                        Map<File, File> outputInputFileMap) {
  List<File> mismatchingFiles = []
  taskToValidate.outputs.files.each { File outputFile
    File inputFile = outputInputFileMap[outputFile]
    if (inputFile != null && outputFile.exists()) {
      String inputFileChecksum = md5ChecksumFile(inputFile)
      String outputFileChecksum = md5ChecksumFile(outputFile)
      if (inputFileChecksum != outputFileChecksum) {
        if (isZipFile(inputFile) && isZipFile(outputFile)) {
          mismatchingFiles += validateZipFilesMatch(inputFile, outputFile)
        } else {
          mismatchingFiles.add(sprintf("%s (%s) != %s (%s)",
                                       inputFile.path, inputFileChecksum,
                                       outputFile.path, outputFileChecksum))
        }
      }
    }
  }
  if (mismatchingFiles) {
    throw new TaskExecutionException(
      taskToValidate, new Exception(
        sprintf("%s failed, unexpected output file(s)\n%s\n\n%s\n",
                taskToValidate.name, mismatchingFiles.join("\n"),
                taskToValidate.ext.standardOutputErrorLogger.output)))
  }
}

/*
 * Validate all output files of a task exist.
 *
 * @param taskToValidate Task to check that all output files specified
 * by the task are present.
 */
void validateOutputFilesExist(Task taskToValidate) {
  List<File> missingFiles = []
  taskToValidate.outputs.files.each {
    if (!it.exists()) { missingFiles.add(it) }
  }
  if (missingFiles) {
    throw new TaskExecutionException(
      taskToValidate, new Exception(
        sprintf("%s failed, missing expected file(s)\n%s\n\n%s\n",
                taskToValidate.name, missingFiles.join("\n"),
                taskToValidate.ext.standardOutputErrorLogger.output)))
  }
}

/*
 * Split the output of the download script into sections.
 *
 * @param Output of the download_artifacts.gradle script.
 *
 * @returns Up to a list of 3 elements, for the sections
 * "Copied artifacts:", "Missing artifacts:", "Modified artifacts:".
 */
List<String> downloadScriptOutputToSectionsList(String output) {
  Set<String> validSections = [
    "Copied artifacts:",
    "Missing artifacts:",
    "Modified artifacts:",
  ].toSet()
  List<String> sections = []
  List<String>currentSection = []
  // Adds the current section to the list of sections and flushes the list.
  def endSectionClosure = {
    if (currentSection) {
      sections.add(currentSection.join("\n"))
      currentSection = []
    }
  }
  // Parse sections from the output string.
  output.eachLine {
    if (validSections.contains(it.trim())) {
      currentSection.add(it)
    } else if (it == "") {
      endSectionClosure()
    } else if (currentSection) {
      currentSection.add(it)
    }
  }
  endSectionClosure()
  return sections
}

/*
 * Generates a test case that:
 * * Attempts to download a set of artifacts specified by packageSpecification
 *   into a target directory (derived from taskName) using the downloader
 *   script.
 * * Validates the expected artifacts are downloaded and match the specified
 *   set of source files specified by outputInputFileMap.
 * * Validates the script output matches expectedScriptOutput (list of strings where
 *   each element is a section of the script's parsed output).
 *
 * @param taskName Name of the task to create.
 * @param taskDescription Verbose description of the task.
 * @param outputInputFileMap Map of output files to expected (input) files.
 * @param expectedScriptOutput List of 3 sections (copied, missing, modified)
 * which match the output of the script.
 * See downloadScriptOutputToSectionsList()
 * @param iterations Number of times to run the test task.
 * @param useJetifier Whether to use the Jetifier to substitute and rewrite
 * libraries.
 */
void createTestTask(String taskName, String taskDescription,
                    String packageSpecification,
                    Map<String, String> outputInputFileMap,
                    List<String> expectedScriptOutput,
                    int iterations=1, boolean useJetifier=false) {
  // Create a target directory relative to the output directory.
  def targetDirFile = new File(project.ext.outputDir, taskName)
  // Move output file paths relative to the target directory and input paths
  // relative to the local maven repo.
  Map<File, File> movedOutputInputFileMap = [:]
  outputInputFileMap.each {
    outputFile, inputFile ->
      movedOutputInputFileMap[new File(targetDirFile, outputFile)] =
        inputFile != null ? new File(project.ext.mavenRepo, inputFile) : null
  }
  Task createDirectoryTask = createDirectoryTask(targetDirFile)
  createDirectoryTask.dependsOn copyTestScript
  iterations.times {
    int currentIteration = it + 1
    String currentTaskName =
      taskName + (iterations > 1 ? "$currentIteration" : "")
    Task testTask = tasks.create(name: currentTaskName,
                                 description: taskDescription,
                                 type: GradleBuild,
                                 dependsOn: createDirectoryTask)
    testTask.with {
      // Logger which captures the output of a task.
      // This doesn't work in parallel builds at the moment.
      // https://github.com/gradle/gradle/issues/6068
      ext.standardOutputErrorLogger = new StandardOutputErrorLogger()

      outputs.files movedOutputInputFileMap.keySet()
      startParameter createStartParameters(packageSpecification,
                                           targetDirFile, useJetifier)
      buildFile project.ext.buildFile
      dir project.ext.outputDir
      doFirst { ext.standardOutputErrorLogger.install(it) }
      doLast {
        ext.standardOutputErrorLogger.uninstall(it)
        validateOutputFilesExist(it)
        validateFilesMatch(it, movedOutputInputFileMap)
        if (expectedScriptOutput != null) {
          List<String> parsedOutput = downloadScriptOutputToSectionsList(
            ext.standardOutputErrorLogger.output)
          assert parsedOutput == expectedScriptOutput
        }
      }
    }
    project.ext.testTaskNames.add(currentTaskName)
  }
}

createTestTask(
  "testDownloadAvailable",
  "Downloads a single artifact and it's dependencies from maven.",
  "android.arch.core:common:1.0.0",
  ["android.arch.core.common-1.0.0.jar":
   "android/arch/core/common/1.0.0/common-1.0.0.jar",
   "com.android.support.support-annotations-26.1.0.jar":
   "com/android/support/support-annotations/26.1.0/" +
   "support-annotations-26.1.0.jar"],
  ["Copied artifacts:\n" +
   "android.arch.core.common-1.0.0.jar\n" +
   "com.android.support.support-annotations-26.1.0.jar"])

createTestTask(
  "testDownloadAvailableWithCustomPackaging",
  "Downloads a single artifact with custom packaging.",
  "com.android.support:support-annotations:23.0.1@magic",
  ["com.android.support.support-annotations-23.0.1.magic":
   "com/android/support/support-annotations/23.0.1/" +
   "support-annotations-23.0.1.magic"],
  ["Copied artifacts:\n" +
   "com.android.support.support-annotations-23.0.1.magic"])

createTestTask(
  "testDownloadAvailableTwice",
  "Downloads a single artifact and it's dependencies from maven.",
  "android.arch.core:common:1.0.0",
  ["android.arch.core.common-1.0.0.jar":
   "android/arch/core/common/1.0.0/common-1.0.0.jar",
   "com.android.support.support-annotations-26.1.0.jar":
   "com/android/support/support-annotations/26.1.0/" +
   "support-annotations-26.1.0.jar"],
  ["Copied artifacts:\n" +
   "android.arch.core.common-1.0.0.jar\n" +
   "com.android.support.support-annotations-26.1.0.jar"],
  2 /* iterations */)

createTestTask(
  "testDownloadAvailableWithSameName",
  "Downloads artifacts with the same artifact name and their dependencies " +
  "from a maven repo.",
  "android.arch.core:common:1.0.0;android.arch.lifecycle:common:1.0.0;",
  ["android.arch.core.common-1.0.0.jar":
   "android/arch/core/common/1.0.0/common-1.0.0.jar",
   "android.arch.lifecycle.common-1.0.0.jar":
   "android/arch/lifecycle/common/1.0.0/common-1.0.0.jar",
   "com.android.support.support-annotations-26.1.0.jar":
   "com/android/support/support-annotations/26.1.0/" +
   "support-annotations-26.1.0.jar"],
  ["Copied artifacts:\n" +
   "android.arch.core.common-1.0.0.jar\n" +
   "android.arch.lifecycle.common-1.0.0.jar\n" +
   "com.android.support.support-annotations-26.1.0.jar"])

createTestTask(
  "testDownloadUnavailable",
  "Attempts to download a non-existant artifact.",
  "apackage.thatdoes:notexist:9.9.9",
  [:],
  ["Missing artifacts:\n" +
   "apackage.thatdoes:notexist:+",
   "Modified artifacts:\n" +
   "apackage.thatdoes:notexist:9.9.9 --> apackage.thatdoes:notexist:+"])

createTestTask(
  "testDownloadConflictingVersions",
  "Downloads conflicting versions of an artifact with the download script " +
  "resolving the conflict.",
  "com.android.support:appcompat-v7:23.0.0;" +
  "com.android.support:support-v4:24.0.0;",
  ["com.android.support.animated-vector-drawable-24.0.0.aar":
   "com/android/support/animated-vector-drawable/24.0.0/" +
   "animated-vector-drawable-24.0.0.aar",
   "com.android.support.appcompat-v7-24.0.0.aar":
   "com/android/support/appcompat-v7/24.0.0/appcompat-v7-24.0.0.aar",
   "com.android.support.support-annotations-24.0.0.jar":
   "com/android/support/support-annotations/24.0.0/" +
   "support-annotations-24.0.0.jar",
   "com.android.support.support-v4-24.0.0.aar":
   "com/android/support/support-v4/24.0.0/support-v4-24.0.0.aar",
   "com.android.support.support-vector-drawable-24.0.0.aar":
   "com/android/support/support-vector-drawable/24.0.0/" +
   "support-vector-drawable-24.0.0.aar"],
  ["Copied artifacts:\n" +
   "com.android.support.animated-vector-drawable-24.0.0.aar\n" +
   "com.android.support.appcompat-v7-24.0.0.aar\n" +
   "com.android.support.support-annotations-24.0.0.jar\n" +
   "com.android.support.support-v4-24.0.0.aar\n" +
   "com.android.support.support-vector-drawable-24.0.0.aar",
   "Modified artifacts:\n" +
   "com.android.support:appcompat-v7:23.0.0 --> " +
   "com.android.support:appcompat-v7:24.0.0@aar"])

createTestTask(
  "testDownloadSrcAar",
  "Download a srcaar artifact and validate it's found and " +
  "renamed to an aar in the target directory.",
  "com.google.firebase:firebase-app-unity:4.3.0;",
  ["com.google.firebase.firebase-app-unity-4.3.0.aar":
   "com/google/firebase/firebase-app-unity/4.3.0/" +
   "firebase-app-unity-4.3.0.srcaar"],
  ["Copied artifacts:\n" +
   "com.google.firebase.firebase-app-unity-4.3.0.aar"])

createTestTask(
  "testFirebaseUnityNotVersionLocked",
  "Ensure firebase-.*-unity packages are not locked to the same version as " +
  "Google Play services or Firebase packages.",
  "com.google.firebase:firebase-app-unity:4.3.0;" +
  "com.google.android.gms:play-services-basement:9.8.0;",
  ["com.google.firebase.firebase-app-unity-4.3.0.aar":
   "com/google/firebase/firebase-app-unity/4.3.0/" +
   "firebase-app-unity-4.3.0.srcaar",
   "com.google.android.gms.play-services-basement-9.8.0.aar":
   null /* Downloaded from Google Maven */],
  ["Copied artifacts:\n" +
   "com.android.support.support-annotations-24.0.0.jar\n" +
   "com.android.support.support-v4-24.0.0.aar\n" +
   "com.google.android.gms.play-services-basement-9.8.0.aar\n" +
   "com.google.firebase.firebase-app-unity-4.3.0.aar"])

createTestTask(
  "testAndroidSupportMultidexNotVersionLocked",
  "Ensure com.android.support:multidex isn't version locked to other legacy " +
  "Android support libraries",
  "com.android.support:multidex:1.0.3;" +
  "com.android.support:support-annotations:24.0.0",
  ["com.android.support.multidex-1.0.3.aar":
   "com/android/support/multidex/1.0.3/multidex-1.0.3.aar",
   "com.android.support.support-annotations-24.0.0.jar":
   "com/android/support/support-annotations/24.0.0/" +
   "support-annotations-24.0.0.jar"],
  ["Copied artifacts:\n" +
   "com.android.support.multidex-1.0.3.aar\n" +
   "com.android.support.support-annotations-24.0.0.jar"])

createTestTask(
  "testDownloadUsingVersionWildcard",
  "Download an artifact using a version wildcard.",
  "com.android.support:appcompat-v7:23.0.+",
  ["com.android.support.appcompat-v7-23.0.1.aar":
   "com/android/support/appcompat-v7/23.0.1/appcompat-v7-23.0.1.aar",
   "com.android.support.support-annotations-23.0.1.jar":
   "com/android/support/support-annotations/23.0.1/" +
   "support-annotations-23.0.1.jar",
   "com.android.support.support-v4-23.0.1.aar":
   "com/android/support/support-v4/23.0.1/support-v4-23.0.1.aar"],
  ["Copied artifacts:\n" +
   "com.android.support.appcompat-v7-23.0.1.aar\n" +
   "com.android.support.support-annotations-23.0.1.jar\n" +
   "com.android.support.support-v4-23.0.1.aar"])

createTestTask(
  "testDownloadUsingVersionRange",
  "Download an artifact using a version range.",
  "com.android.support:support-annotations:[23,26.1.0]",
  ["com.android.support.support-annotations-26.1.0.jar":
   "com/android/support/support-annotations/26.1.0/" +
   "support-annotations-26.1.0.jar"],
  ["Copied artifacts:\n" +
   "com.android.support.support-annotations-26.1.0.jar"])

createTestTask(
  "testDownloadSnapshotVersion",
  "Download a snapshot version of an artifact.",
  "com.android.support:support-v4:23.0.1;" +
  "com.android.support:support-annotations:27.0.2-SNAPSHOT",
  ["com.android.support.support-annotations-27.0.2-SNAPSHOT.jar":
   "com/android/support/support-annotations/27.0.2-SNAPSHOT/" +
   "support-annotations-27.0.2-SNAPSHOT.jar"],
  ["Copied artifacts:\n" +
   "com.android.support.support-annotations-27.0.2-SNAPSHOT.jar",
   "Missing artifacts:\n" +
   "com.android.support:support-v4:27.0.2-SNAPSHOT",
   "Modified artifacts:\n" +
   "com.android.support:support-v4:23.0.1 --> " +
   "com.android.support:support-v4:27.0.2-SNAPSHOT"])

createTestTask(
  "testDownloadCompatibleCommonDependency",
  "Download artifacts with compatible dependencies.",
  "org.test.psr:pull:1.0.2;org.test.psr:push:1.0.3",
  ["org.test.psr.common-impl-1.0.0.aar":
   "org/test/psr/common-impl/1.0.0/common-impl-1.0.0.aar",
   "org.test.psr.common-1.0.1.aar":
   "org/test/psr/common/1.0.1/common-1.0.1.aar",
   "org.test.psr.pull-1.0.2.aar":
   "org/test/psr/pull/1.0.2/pull-1.0.2.aar",
   "org.test.psr.push-1.0.3.aar":
   "org/test/psr/push/1.0.3/push-1.0.3.aar"],
  ["Copied artifacts:\n" +
   "org.test.psr.common-1.0.1.aar\n" +
   "org.test.psr.common-impl-1.0.0.aar\n" +
   "org.test.psr.pull-1.0.2.aar\n" +
   "org.test.psr.push-1.0.3.aar"])

createTestTask(
  "testDownloadIncompatibleCommonDependency",
  "Download artifacts with incomaptible dependencies.\n" +
  "This should result in a forced upgrade of the minimal set of new versions",
  "org.test.psr:push:2.0.2;org.test.psr:pull:2.0.3",
  ["org.test.psr.pull-2.0.3.aar": "org/test/psr/pull/2.0.3/pull-2.0.3.aar",
   "org.test.psr.push-2.0.4.aar": "org/test/psr/push/2.0.4/push-2.0.4.aar",
   "org.test.psr.common-impl-2.3.0.aar":
   "org/test/psr/common-impl/2.3.0/common-impl-2.3.0.aar",
   "org.test.psr.common-2.4.0.aar":
   "org/test/psr/common/2.4.0/common-2.4.0.aar"],
  ["Copied artifacts:\n" +
   "org.test.psr.common-2.4.0.aar\n" +
   "org.test.psr.common-impl-2.3.0.aar\n" +
   "org.test.psr.pull-2.0.3.aar\n" +
   "org.test.psr.push-2.0.4.aar",
   "Modified artifacts:\n" +
   "org.test.psr:pull:2.0.3 --> org.test.psr:pull:2.0.+\n" +
   "org.test.psr:push:2.0.2 --> org.test.psr:push:2.0.+"])

createTestTask(
  "testDownloadLatestOfSet",
  "Download the latest version of a set of dependencies.",
  "org.test.psr:common:[3.0.2];org.test.psr:common:[3.0.3]",
  ["org.test.psr.common-3.0.3.aar":
   "org/test/psr/common/3.0.3/common-3.0.3.aar",
   "org.test.psr.common-impl-3.0.2.aar":
   "org/test/psr/common-impl/3.0.2/common-impl-3.0.2.aar"],
  ["Copied artifacts:\n" +
   "org.test.psr.common-3.0.3.aar\n" +
   "org.test.psr.common-impl-3.0.2.aar",
   "Modified artifacts:\n" +
   "org.test.psr:common:[3.0.2] --> org.test.psr:common:[3.0.3]"])

createTestTask(
  "testDownloadTransitiveConflicts",
  "Download artifacts with a conflicting transitive dependency " +
  "(common-impl which requires either 2.4.+ via push:2.0.4 or 4.+ via " +
  "pull:6.0.1) pinned to a specific version [4.0.0].\n",
  "org.test.psr:push:2.0.4;org.test.psr:pull:6.0.1;" +
  "org.test.psr:common-impl:[4.0.0]",
  ["org.test.psr.common-2.4.0.aar":
   "org/test/psr/common/2.4.0/common-2.4.0.aar",
   "org.test.psr.common-impl-4.0.0.aar":
   "org/test/psr/common-impl/4.0.0/common-impl-4.0.0.aar",
   "org.test.psr.pull-6.0.1.aar":
   "org/test/psr/pull/6.0.1/pull-6.0.1.aar",
   "org.test.psr.push-2.0.4.aar":
   "org/test/psr/push/2.0.4/push-2.0.4.aar"],
  ["Copied artifacts:\n" +
   "org.test.psr.common-2.4.0.aar\n" +
   "org.test.psr.common-impl-4.0.0.aar\n" +
   "org.test.psr.pull-6.0.1.aar\n" +
   "org.test.psr.push-2.0.4.aar"])

createTestTask(
  "testDownloadIncompatibleMajorVersions",
  "Download artifacts with incompatible major versioned dependencies.\n" +
  "This should result in a forced upgrade to the latest compatible major " +
  "version",
  "org.test.psr:push:5.0.1;org.test.psr:pull:6.0.1",
  ["org.test.psr.pull-6.0.1.aar": "org/test/psr/pull/6.0.1/pull-6.0.1.aar",
   "org.test.psr.push-5.0.1.aar": "org/test/psr/push/5.0.1/push-5.0.1.aar",
   "org.test.psr.common-5.0.1.aar":
   "org/test/psr/common/5.0.1/common-5.0.1.aar",
   "org.test.psr.common-impl-5.0.0.aar":
   "org/test/psr/common-impl/5.0.0/common-impl-5.0.0.aar"],
  ["Copied artifacts:\n" +
   "org.test.psr.common-5.0.1.aar\n" +
   "org.test.psr.common-impl-5.0.0.aar\n" +
   "org.test.psr.pull-6.0.1.aar\n" +
   "org.test.psr.push-5.0.1.aar",
   "Modified artifacts:\n" +
   "org.test.psr:pull:6.0.1 --> org.test.psr:pull:+\n" +
   "org.test.psr:push:5.0.1 --> org.test.psr:push:+"])

createTestTask(
  "testDownloadOrderingLowestToHighestVersion",
  "Download the highest version of the specified set of packages.  The\n" +
  "packages ordering should not change the resolution result.",
  "com.android.support:support-annotations:23.+;" +
  "com.android.support:support-annotations:24.+",
  [:],
  ["Copied artifacts:\n" +
   "com.android.support.support-annotations-24.0.0.jar"])

createTestTask(
  "testDownloadOrderingHighestToLowestVersion",
  "Download the highest version of the specified set of packages.  The\n" +
  "packages ordering should not change the resolution result.",
  "com.android.support:support-annotations:24.+;" +
  "com.android.support:support-annotations:23.+",
  [:],
  ["Copied artifacts:\n" +
   "com.android.support.support-annotations-24.0.0.jar"])

createTestTask(
  "testVersionLockedObsoleteTransitiveDependency",
  "Packages are upgraded to the most recent version locked package " +
  "where a transitive dependency of an initially selected package is removed.",
  "org.test.psr.locked:input:1.2.3;" +
  "org.test.psr.locked:output:1.5.0;",
  ["org.test.psr.locked.input-1.5.0.aar":
   "org/test/psr/locked/input/1.5.0/input-1.5.0.aar",
   "org.test.psr.locked.output-1.5.0.aar":
   "org/test/psr/locked/output/1.5.0/output-1.5.0.aar",
   "org.test.psr.locked.new-common-1.5.0.aar":
   "org/test/psr/locked/new-common/1.5.0/new-common-1.5.0.aar"],
  ["Copied artifacts:\n" +
   "org.test.psr.locked.input-1.5.0.aar\n" +
   "org.test.psr.locked.new-common-1.5.0.aar\n" +
   "org.test.psr.locked.output-1.5.0.aar",
   "Modified artifacts:\n" +
   "org.test.psr.locked:input:1.2.3 --> org.test.psr.locked:input:1.5.0@aar"])

createTestTask(
  "testVersionLockedAndNonVersionLocked",
  "Packages are upgraded to the most recent non-version locked package " +
  "if a mix of version locked vs. non-version locked packages are specified.",
  "com.google.android.gms:play-services-basement:12.0.0;" +
  "com.google.android.gms:play-services-tasks:12.0.0;" +
  "com.google.android.gms:play-services-basement:15.0.0;" +
  "a.non:existent-package:1.2.3;",
  ["android.arch.core.common-1.0.0.jar":
   "android/arch/core/common/1.0.0/common-1.0.0.jar",
   "android.arch.lifecycle.common-1.0.0.jar":
   "android/arch/lifecycle/common/1.0.0/common-1.0.0.jar",
   "android.arch.lifecycle.runtime-1.0.0.aar":
   "android/arch/lifecycle/runtime/1.0.0/runtime-1.0.0.aar",
   "com.android.support.support-annotations-26.1.0.jar":
   "com/android/support/support-annotations/26.1.0/" +
   "support-annotations-26.1.0.jar",
   "com.android.support.support-compat-26.1.0.aar":
   "com/android/support/support-compat/26.1.0/support-compat-26.1.0.aar",
   "com.android.support.support-core-ui-26.1.0.aar":
   "com/android/support/support-core-ui/26.1.0/support-core-ui-26.1.0.aar",
   "com.android.support.support-core-utils-26.1.0.aar":
   "com/android/support/support-core-utils/26.1.0/" +
   "support-core-utils-26.1.0.aar",
   "com.android.support.support-fragment-26.1.0.aar":
   "com/android/support/support-fragment/26.1.0/support-fragment-26.1.0.aar",
   "com.android.support.support-media-compat-26.1.0.aar":
   "com/android/support/support-media-compat/26.1.0/" +
   "support-media-compat-26.1.0.aar",
   "com.android.support.support-v4-26.1.0.aar":
   "com/android/support/support-v4/26.1.0/support-v4-26.1.0.aar",
   "com.google.android.gms.play-services-basement-15.0.0.aar":
   "com/google/android/gms/play-services-basement/15.0.0/" +
   "play-services-basement-15.0.0.aar",
   "com.google.android.gms.play-services-tasks-15.0.0.aar":
   "com/google/android/gms/play-services-tasks/15.0.0/" +
   "play-services-tasks-15.0.0.aar",
  ],
  ["Copied artifacts:\n" +
   "android.arch.core.common-1.0.0.jar\n" +
   "android.arch.lifecycle.common-1.0.0.jar\n" +
   "android.arch.lifecycle.runtime-1.0.0.aar\n" +
   "com.android.support.support-annotations-26.1.0.jar\n" +
   "com.android.support.support-compat-26.1.0.aar\n" +
   "com.android.support.support-core-ui-26.1.0.aar\n" +
   "com.android.support.support-core-utils-26.1.0.aar\n" +
   "com.android.support.support-fragment-26.1.0.aar\n" +
   "com.android.support.support-media-compat-26.1.0.aar\n" +
   "com.android.support.support-v4-26.1.0.aar\n" +
   "com.google.android.gms.play-services-basement-15.0.0.aar\n" +
   "com.google.android.gms.play-services-tasks-15.0.0.aar",
   "Missing artifacts:\n" +
   "a.non:existent-package:+",
   "Modified artifacts:\n" +
   "a.non:existent-package:1.2.3 --> a.non:existent-package:+\n" +
   "com.google.android.gms:play-services-basement:12.0.0 --> " +
   "com.google.android.gms:play-services-basement:15.0.0\n" +
   "com.google.android.gms:play-services-tasks:12.0.0 --> " +
   "com.google.android.gms:play-services-tasks:+"])

createTestTask(
  "testDirectJetifier",
  "Verify a direct dependency upon the legacy Android support library is " +
  "remapped ot the Jetpack libraries by the Jetifier.",
  "com.android.support:support-annotations:26.1.0",
  ["androidx.annotation.annotation-1.0.0.jar":
   "androidx/annotation/annotation/1.0.0/annotation-1.0.0.jar"],
  ["Copied artifacts:\n" +
   "androidx.annotation.annotation-1.0.0.jar",
   "Modified artifacts:\n" +
   "com.android.support:support-annotations:26.1.0 --> " +
   "androidx.annotation:annotation:1.0.0"],
  1 /* iterations */,
  true /* useJetifier */)

createTestTask(
  "testTransitiveJetifier",
  "Verify transitive dependencies of a package are remapped with the " +
  "Jetifier and the package referencing the legacy support libraries is " +
  "processed by the Jetifier to reference Jetpack libraries.",
  "com.google.android.gms:play-services-basement:9.8.0",
  ["androidx.annotation.annotation-1.0.0.jar":
   "androidx/annotation/annotation/1.0.0/annotation-1.0.0.jar",
   "androidx.arch.core.core-common-2.0.0.jar":
   "androidx/arch/core/core-common/2.0.0/core-common-2.0.0.jar",
   "androidx.arch.core.core-runtime-2.0.0.aar":
   "androidx/arch/core/core-runtime/2.0.0/core-runtime-2.0.0.aar",
   "androidx.asynclayoutinflater.asynclayoutinflater-1.0.0.aar":
   "androidx/asynclayoutinflater/asynclayoutinflater/1.0.0/" +
   "asynclayoutinflater-1.0.0.aar",
   "androidx.collection.collection-1.0.0.jar":
   "androidx/collection/collection/1.0.0/collection-1.0.0.jar",
   "androidx.coordinatorlayout.coordinatorlayout-1.0.0.aar":
   "androidx/coordinatorlayout/coordinatorlayout/1.0.0/" +
   "coordinatorlayout-1.0.0.aar",
   "androidx.core.core-1.0.0.aar":
   "androidx/core/core/1.0.0/core-1.0.0.aar",
   "androidx.cursoradapter.cursoradapter-1.0.0.aar":
   "androidx/cursoradapter/cursoradapter/1.0.0/cursoradapter-1.0.0.aar",
   "androidx.customview.customview-1.0.0.aar":
   "androidx/customview/customview/1.0.0/customview-1.0.0.aar",
   "androidx.documentfile.documentfile-1.0.0.aar":
   "androidx/documentfile/documentfile/1.0.0/documentfile-1.0.0.aar",
   "androidx.drawerlayout.drawerlayout-1.0.0.aar":
   "androidx/drawerlayout/drawerlayout/1.0.0/drawerlayout-1.0.0.aar",
   "androidx.fragment.fragment-1.0.0.aar":
   "androidx/fragment/fragment/1.0.0/fragment-1.0.0.aar",
   "androidx.interpolator.interpolator-1.0.0.aar":
   "androidx/interpolator/interpolator/1.0.0/interpolator-1.0.0.aar",
   "androidx.legacy.legacy-support-core-ui-1.0.0.aar":
   "androidx/legacy/legacy-support-core-ui//1.0.0/" +
   "legacy-support-core-ui-1.0.0.aar",
   "androidx.legacy.legacy-support-core-utils-1.0.0.aar":
   "androidx/legacy/legacy-support-core-utils//1.0.0/" +
   "legacy-support-core-utils-1.0.0.aar",
   "androidx.legacy.legacy-support-v4-1.0.0.aar":
   "androidx/legacy/legacy-support-v4/1.0.0/legacy-support-v4-1.0.0.aar",
   "androidx.lifecycle.lifecycle-common-2.0.0.jar":
   "androidx/lifecycle/lifecycle-common/2.0.0/lifecycle-common-2.0.0.jar",
   "androidx.lifecycle.lifecycle-livedata-2.0.0.aar":
   "androidx/lifecycle/lifecycle-livedata/2.0.0/lifecycle-livedata-2.0.0.aar",
   "androidx.lifecycle.lifecycle-livedata-core-2.0.0.aar":
   "androidx/lifecycle/lifecycle-livedata-core/2.0.0/" +
   "lifecycle-livedata-core-2.0.0.aar",
   "androidx.lifecycle.lifecycle-runtime-2.0.0.aar":
   "androidx/lifecycle/lifecycle-runtime/2.0.0/lifecycle-runtime-2.0.0.aar",
   "androidx.lifecycle.lifecycle-viewmodel-2.0.0.aar":
   "androidx/lifecycle/lifecycle-viewmodel/2.0.0/lifecycle-viewmodel-2.0.0.aar",
   "androidx.loader.loader-1.0.0.aar":
   "androidx/loader/loader/1.0.0/loader-1.0.0.aar",
   "androidx.localbroadcastmanager.localbroadcastmanager-1.0.0.aar":
   "androidx/localbroadcastmanager/localbroadcastmanager/1.0.0/" +
   "localbroadcastmanager-1.0.0.aar",
   "androidx.media.media-1.0.0.aar":
   "androidx/media/media/1.0.0/media-1.0.0.aar",
   "androidx.print.print-1.0.0.aar":
   "androidx/print/print/1.0.0/print-1.0.0.aar",
   "androidx.slidingpanelayout.slidingpanelayout-1.0.0.aar":
   "androidx/slidingpanelayout/slidingpanelayout/1.0.0/" +
   "slidingpanelayout-1.0.0.aar",
   "androidx.swiperefreshlayout.swiperefreshlayout-1.0.0.aar":
   "androidx/swiperefreshlayout/swiperefreshlayout/1.0.0/" +
   "swiperefreshlayout-1.0.0.aar",
   "androidx.versionedparcelable.versionedparcelable-1.0.0.aar":
   "androidx/versionedparcelable/versionedparcelable/1.0.0/" +
   "versionedparcelable-1.0.0.aar",
   "androidx.viewpager.viewpager-1.0.0.aar":
   "androidx/viewpager/viewpager/1.0.0/viewpager-1.0.0.aar",
   "com.google.android.gms.play-services-basement-9.8.0.aar":
   "com/google/android/gms/play-services-basement/9.8.0-jetified/" +
   "com.google.android.gms.play-services-basement-9.8.0.aar",
  ],
  ["Copied artifacts:\n" +
   "androidx.annotation.annotation-1.0.0.jar\n" +
   "androidx.arch.core.core-common-2.0.0.jar\n" +
   "androidx.arch.core.core-runtime-2.0.0.aar\n" +
   "androidx.asynclayoutinflater.asynclayoutinflater-1.0.0.aar\n" +
   "androidx.collection.collection-1.0.0.jar\n" +
   "androidx.coordinatorlayout.coordinatorlayout-1.0.0.aar\n" +
   "androidx.core.core-1.0.0.aar\n" +
   "androidx.cursoradapter.cursoradapter-1.0.0.aar\n" +
   "androidx.customview.customview-1.0.0.aar\n" +
   "androidx.documentfile.documentfile-1.0.0.aar\n" +
   "androidx.drawerlayout.drawerlayout-1.0.0.aar\n" +
   "androidx.fragment.fragment-1.0.0.aar\n" +
   "androidx.interpolator.interpolator-1.0.0.aar\n" +
   "androidx.legacy.legacy-support-core-ui-1.0.0.aar\n" +
   "androidx.legacy.legacy-support-core-utils-1.0.0.aar\n" +
   "androidx.legacy.legacy-support-v4-1.0.0.aar\n" +
   "androidx.lifecycle.lifecycle-common-2.0.0.jar\n" +
   "androidx.lifecycle.lifecycle-livedata-2.0.0.aar\n" +
   "androidx.lifecycle.lifecycle-livedata-core-2.0.0.aar\n" +
   "androidx.lifecycle.lifecycle-runtime-2.0.0.aar\n" +
   "androidx.lifecycle.lifecycle-viewmodel-2.0.0.aar\n" +
   "androidx.loader.loader-1.0.0.aar\n" +
   "androidx.localbroadcastmanager.localbroadcastmanager-1.0.0.aar\n" +
   "androidx.media.media-1.0.0.aar\n" +
   "androidx.print.print-1.0.0.aar\n" +
   "androidx.slidingpanelayout.slidingpanelayout-1.0.0.aar\n" +
   "androidx.swiperefreshlayout.swiperefreshlayout-1.0.0.aar\n" +
   "androidx.versionedparcelable.versionedparcelable-1.0.0.aar\n" +
   "androidx.viewpager.viewpager-1.0.0.aar\n" +
   "com.google.android.gms.play-services-basement-9.8.0.aar"],
  1 /* iterations */,
  true /* useJetifier */)

task testUnitTests(type: GradleBuild, dependsOn: copyTestScript) {
  def startParameters = new StartParameter()
  startParameters.projectProperties = ["RUN_TESTS": "1"]
  startParameters.logLevel = logging.level
  project.ext.testTaskNames.add(new String("${name}"))

  description "Run unit tests."
  startParameter startParameters
  buildFile project.ext.buildFile
  dir project.ext.outputDir
}

// Due to https://github.com/gradle/gradle/issues/6068 all test tasks
// must be run in serial at the moment so the following serializes all
// tasks.
// When the bug in Gradle is fixed the following code can be replaced with:
// project.defaultTasks = project.ext.testTaskNames
ext.testTaskNames.eachWithIndex { String taskName, int index ->
  if (index == 0) return
  project.getTasksByName(ext.testTaskNames[index - 1], false).each {
    Task previousTask ->
      project.getTasksByName(taskName, false).each { Task currentTask ->
        previousTask.dependsOn(currentTask)
      }
  }
}
project.defaultTasks = [ext.testTaskNames[0]]
